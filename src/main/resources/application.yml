spring:
  application:
    name: daview-backend

  datasource:
    url: jdbc:log4jdbc:mysql://localhost:3306/dvdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: root
    password: rootpw
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy # com.mysql.cj.jdbc.Driver

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: chat-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    properties:
      'allow.auto.create.topics': true

  # Redis 설정 (Care Pulse Tracker 캐싱)
  data:
    redis:
      host: localhost
      port: 6379
      password: # 비밀번호 없음
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  mail:
    host: smtp.gmail.com
    port: 587
    username: makecritical01@gmail.com
    password: lzxn dngz umjp tgui
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

logging:
  level:
    jdbc: debug
    jdbc.sqlonly: debug
    jdbc.sqltiming: debug
    jdbc.resultset: debug
    jdbc.audit: off
    jdbc.connection: off

mybatis:
  mapper-locations: classpath*:mapper/**/*.xml  # MyBatis 매퍼 XML 파일 위치
  type-aliases-package: com.daview.dto
  configuration:
    map-underscore-to-camel-case: true  # DB 필드명 snake_case → Java camelCase 자동 변환
    # log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl  # MyBatis 로그 SLF4J 사용   
    cache-enabled: false
    
server:
  servlet:
    session:
      timeout: 30m
    multipart:
      max-file-size: 10MB        # 개별 파일 최대 크기
      max-request-size: 10MB     # 전체 요청 최대 크기
      file-size-threshold: 1KB   # 메모리에 저장할 임계값

naver:
  sens:
    access-key: "ncp_iam_BPAMKR4t6gmxw5Yf66MK"
    secret-key: "ncp_iam_BPKMKR2vBPVaDAQTWHmLU3Q8APViuXhSDj"
    service-id: "ncp:sms:kr:354802395254:daview"
    sender-phone: "01087665119" 
    
jwt:
  secret: your-secure-secret-key-must-be-long-enough

# 파일 업로드 설정
file:
  upload:
    path: uploads/                # 업로드 파일 저장 경로 (상대경로)
    url: /uploads/                # /api/files/에서 /uploads/로 변경

iamport:
  api:
    key: "test"
    secret: "test"

# ===== Care Pulse Tracker 설정 =====
care-pulse:
  # Flink 설정
  flink:
    jobmanager-url: http://localhost:8081
    parallelism: 2
    checkpoint-interval: 10000
    
  # InfluxDB 설정 (시계열 데이터 저장)
  influxdb:
    url: http://localhost:8086
    token: care-pulse-token-123456789
    org: care-pulse
    bucket: vital-signs
    
  # PostgreSQL 설정 (관계형 데이터)
  postgres:
    url: jdbc:postgresql://localhost:5432/care_pulse_db
    username: care_pulse_user
    password: care_pulse_pass
    
  # OpenAI 설정
  openai:
    api-key: ${OPENAI_API_KEY:your-openai-api-key}
    model: gpt-4-turbo
    max-tokens: 1000
    temperature: 0.3
    
  # 실시간 데이터 처리 설정
  streaming:
    kafka:
      topics:
        vital-signs: care-pulse-vitals
        alerts: care-pulse-alerts
        analysis: care-pulse-analysis
      consumer-group: care-pulse-consumers
    
  # WebSocket 설정
  websocket:
    endpoint: /ws/care-pulse
    heartbeat-interval: 30000
    connection-timeout: 60000
    
  # 알림 설정
  alerts:
    high-priority-threshold: 80
    medium-priority-threshold: 60
    low-priority-threshold: 40
    
  # 캐시 설정
  cache:
    patient-data-ttl: 300 # 5분
    analysis-result-ttl: 1800 # 30분
    alert-ttl: 3600 # 1시간

# 관리 도구 설정 (Actuator)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true



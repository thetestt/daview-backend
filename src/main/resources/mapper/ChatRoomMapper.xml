<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.daview.mapper.ChatRoomMapper">

<select id="getChatRoomListForUser" resultType="com.daview.dto.ChatRoomDTO">
  SELECT
    cr.chatroom_id AS chatroomId,
    CASE
      WHEN cr.sender_id = #{memberId} THEN cr.receiver_id
      ELSE cr.sender_id
    END AS opponentId,
    (
      SELECT du.name
      FROM dv_users du
      WHERE du.member_id = CASE
        WHEN cr.sender_id = #{memberId} THEN cr.receiver_id
        ELSE cr.sender_id
      END
    ) AS opponentName,
    cm.content AS lastMessage,
    cm.sent_at AS lastTime,
    (
      SELECT COUNT(*)
      FROM chatmessage cm2
      WHERE cm2.chatroom_id = cr.chatroom_id
        AND cm2.is_read = 0
        AND cm2.sender_id != #{memberId}
    ) AS unreadCount
  FROM chatroom cr
  LEFT JOIN (
    SELECT
      a1.chatroom_id,
      a1.content,
      a1.sent_at
    FROM chatmessage a1
    INNER JOIN (
      SELECT chatroom_id, MAX(sent_at) AS max_sent
      FROM chatmessage
      GROUP BY chatroom_id
    ) a2 ON a1.chatroom_id = a2.chatroom_id
         AND a1.sent_at = a2.max_sent
  ) cm ON cr.chatroom_id = cm.chatroom_id
WHERE
  (
    (
      cr.sender_id = #{memberId} AND cr.sender_trash_can = FALSE
    )
    OR
    (
      cr.receiver_id = #{memberId} AND cr.receiver_trash_can = FALSE
    )
    OR
    (
      cr.sender_id IN (
        SELECT facility_id FROM facility WHERE member_id = #{memberId}
        UNION
        SELECT caregiver_id FROM caregiver WHERE member_id = #{memberId}
      ) AND cr.sender_trash_can = FALSE
    )
    OR
    (
      cr.receiver_id IN (
        SELECT facility_id FROM facility WHERE member_id = #{memberId}
        UNION
        SELECT caregiver_id FROM caregiver WHERE member_id = #{memberId}
      ) AND cr.receiver_trash_can = FALSE
    )
  )
ORDER BY cm.sent_at IS NULL, cm.sent_at DESC
</select>
  
    <!-- 1. 채팅방 생성 -->
<insert id="insertChatRoom">
    INSERT INTO chatroom (chatroom_id, sender_id, receiver_id, facility_id)
    VALUES (#{chatroomId}, #{senderId}, #{receiverId}, #{facilityId})
</insert>
	
	<!-- 2. 기존 채팅방 확인 -->
<select id="findChatRoomId" resultType="string">
    SELECT chatroom_id
    FROM chatroom
    WHERE sender_id = #{senderId}
      AND receiver_id = #{receiverId}
      AND facility_id = #{facilityId}
    LIMIT 1
</select>

    <!-- 3. 유저의 모든 채팅방 목록 조회 -->
<select id="getChatRoomsByMemberId" resultType="com.daview.dto.ChatRoomDTO">
    SELECT chatroom_id AS chatroomId,
           CASE 
             WHEN sender_id = #{memberId} THEN sender_id
             ELSE receiver_id
           END AS memberId,
           facility_id AS facilityId,
           created_at AS createdAt
    FROM chatroom
    WHERE 
      (
        sender_id = #{memberId} AND sender_trash_can = FALSE
      )
      OR
      (
        receiver_id = #{memberId} AND receiver_trash_can = FALSE
      )
</select>
    
    <!-- 채팅방 접근권한 맴버 아이디 -->
<select id="isUserInChatRoom" resultType="int">
  SELECT COUNT(*)
  FROM chatroom
  WHERE chatroom_id = #{chatroomId}
    AND (sender_id = #{memberId,jdbcType=BIGINT} OR receiver_id = #{memberId,jdbcType=BIGINT})
</select>
    
    

<select id="getChatRoomInfoForList" resultType="com.daview.dto.ChatRoomDTO">
  SELECT
    cr.chatroom_id AS chatroomId,
    CASE
      WHEN cr.sender_id = #{memberId} THEN cr.receiver_id
      ELSE cr.sender_id
    END AS opponentId,
    (
      SELECT du.name
      FROM dv_users du
      WHERE du.member_id = CASE
        WHEN cr.sender_id = #{memberId} THEN cr.receiver_id
        ELSE cr.sender_id
      END
    ) AS opponentName,
    cm.content AS lastMessage,
    cm.sent_at AS lastTime,
    (
      SELECT COUNT(*)
      FROM chatmessage cm2
      WHERE cm2.chatroom_id = cr.chatroom_id
        AND cm2.is_read = 0
        AND cm2.sender_id != #{memberId}
    ) AS unreadCount
  FROM chatroom cr
  LEFT JOIN (
    SELECT
      content,
      sent_at,
      chatroom_id
    FROM chatmessage
    WHERE (chatroom_id, sent_at) IN (
      SELECT chatroom_id, MAX(sent_at)
      FROM chatmessage
      GROUP BY chatroom_id
    )
  ) cm ON cr.chatroom_id = cm.chatroom_id
  WHERE cr.chatroom_id = #{chatroomId}
    AND (
      (cr.sender_id = #{memberId} AND cr.sender_trash_can = FALSE)
      OR
      (cr.receiver_id = #{memberId} AND cr.receiver_trash_can = FALSE)
    )
</select>

<select id="getOpponentId" resultType="long">
  SELECT CASE
           WHEN sender_id = #{memberId} THEN receiver_id
           ELSE sender_id
         END AS opponentId
  FROM chatroom
  WHERE chatroom_id = #{chatroomId}
</select>

<select id="getChatRoomInfo" resultType="com.daview.dto.ChatRoomDTO">
  SELECT
    cr.chatroom_id AS chatroomId,
    
    CASE
      WHEN cr.sender_id = #{memberId} THEN cr.receiver_id
      ELSE cr.sender_id
    END AS opponentId,
    
    -- 기본 이름 (dv_users.name)
    (
      SELECT du.name
      FROM dv_users du
      WHERE du.member_id = CASE
        WHEN cr.sender_id = #{memberId} THEN cr.receiver_id
        ELSE cr.sender_id
      END
    ) AS opponentName,
    
    -- 마지막 메시지 및 시간
    cm.content AS lastMessage,
    cm.sent_at AS lastTime,
    
    -- 읽지 않은 메시지 수
    (
      SELECT COUNT(*)
      FROM chatmessage cm2
      WHERE cm2.chatroom_id = cr.chatroom_id
        AND cm2.is_read = 0
        AND cm2.sender_id != #{memberId}
    ) AS unreadCount,
    
    -- 시설 정보 (facility_id 추가)
    cr.facility_id AS facilityId, 

    -- 1. 시설 정보 가져오기
    (
      SELECT f.facility_type
      FROM facility f
      WHERE f.facility_id = cr.facility_id
      LIMIT 1
    ) AS facilityType,

    (
      SELECT f.facility_name
      FROM facility f
      WHERE f.facility_id = cr.facility_id
      LIMIT 1
    ) AS facilityName,

    (
      SELECT f.facility_address_location
      FROM facility f
      WHERE f.facility_id = cr.facility_id
      LIMIT 1
    ) AS facilityAddressLocation,

    (
      SELECT f.facility_address_city
      FROM facility f
      WHERE f.facility_id = cr.facility_id
      LIMIT 1
    ) AS facilityAddressCity,

    (
      SELECT f.facility_phone
      FROM facility f
      WHERE f.facility_id = cr.facility_id
      LIMIT 1
    ) AS facilityPhone,

    -- 2. 요양사 정보 (caregiver_id로 조회)
    (
      SELECT c.hope_work_area_location
      FROM caregiver c
      WHERE c.caregiver_id = cr.facility_id
    ) AS hopeWorkAreaLocation,

    (
      SELECT c.hope_work_area_city
      FROM caregiver c
      WHERE c.caregiver_id = cr.facility_id
    ) AS hopeWorkAreaCity,
    
    (
      SELECT du.name
      FROM dv_users du
      WHERE du.member_id = (
        SELECT c.member_id
        FROM caregiver c
        WHERE c.caregiver_id = cr.facility_id
      )
    ) AS caregiverName,
    
    -- 3. 일반 유저 정보 (caregiver_id가 없으면 일반 유저)
    (
      SELECT du.name
      FROM dv_users du
      WHERE du.member_id = cr.receiver_id
    ) AS userName

  FROM chatroom cr
  LEFT JOIN (
    SELECT
      a1.chatroom_id,
      a1.content,
      a1.sent_at
    FROM chatmessage a1
    INNER JOIN (
      SELECT chatroom_id, MAX(sent_at) AS max_sent
      FROM chatmessage
      GROUP BY chatroom_id
    ) a2 ON a1.chatroom_id = a2.chatroom_id
         AND a1.sent_at = a2.max_sent
  ) cm ON cr.chatroom_id = cm.chatroom_id
  WHERE cr.chatroom_id = #{chatroomId}
</select>

<update id="updateTrashCan">
  UPDATE chatroom
  SET 
    sender_trash_can = CASE WHEN sender_id = #{memberId} THEN TRUE ELSE sender_trash_can END,
    receiver_trash_can = CASE WHEN receiver_id = #{memberId} THEN TRUE ELSE receiver_trash_can END,
    deleted_at = NOW()
  WHERE chatroom_id = #{chatroomId}
    AND (sender_id = #{memberId} OR receiver_id = #{memberId})
</update>

<select id="existsByChatroomIdAndMemberId" resultType="boolean" parameterType="map">
  SELECT EXISTS (
    SELECT 1
    FROM chatroom
    WHERE chatroom_id = #{chatroomId}
      AND (
        (sender_id = #{memberId} AND sender_trash_can = FALSE)
        OR
        (receiver_id = #{memberId} AND receiver_trash_can = FALSE)
      )
  )
</select>


   
</mapper>
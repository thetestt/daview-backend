<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.daview.mapper.admin.AdminPaymentMapper">
    
    <!-- 결제 목록 조회 -->
    <select id="selectPaymentList" resultType="com.daview.dto.PaymentDTO">
        SELECT 
            p.pym_id as paymentId,
            p.pym_id as pymId,
            p.imp_uid as impUid,
            p.merchant_uid as merchantUid,
            p.member_id as memberId,
            u.name as memberName,
            p.cust_nm as customerName,
            p.cust_nm as custNm,
            p.cust_tel as customerPhone,
            p.cust_tel as custTel,
            p.cust_em_tel as customerEmail,
            p.cust_em_tel as custEmTel,
            p.cust_date as customerDate,
            p.cust_memo as customerMemo,
            p.cust_memo as custMemo,
            p.pym_price as amount,
            p.pym_price as pymPrice,
            p.pym_status as status,
            p.pym_status as pymStatus,
            p.pym_method as paymentMethod,
            p.pym_method as paymentMethodName,
            p.pym_num as paymentNumber,
            p.pym_date as paymentDate,
            p.pym_date as pymDate,
            -- 예약 정보 (매핑 테이블을 통해)
            prm.rsv_id as reservationId,
            r.prod_nm as productName,
            r.prod_type as productType,
            rt.rsv_name as reservationTypeName
        FROM payment p
        LEFT JOIN dv_users u ON p.member_id = u.member_id
        LEFT JOIN payment_reservation_map prm ON p.pym_id = prm.pym_id
        LEFT JOIN reservation r ON prm.rsv_id = r.rsv_id
        LEFT JOIN rsv_type rt ON r.rsv_type = rt.rsv_type
        WHERE 1=1
        <if test="params.search != null and params.search != ''">
            AND (
                p.cust_nm LIKE CONCAT('%', #{params.search}, '%')
                OR u.name LIKE CONCAT('%', #{params.search}, '%')
                OR p.merchant_uid LIKE CONCAT('%', #{params.search}, '%')
                OR p.imp_uid LIKE CONCAT('%', #{params.search}, '%')
                OR r.prod_nm LIKE CONCAT('%', #{params.search}, '%')
            )
        </if>
        <if test="params.status != null and params.status != ''">
            AND p.pym_status = #{params.status}
        </if>
        <if test="params.paymentMethod != null and params.paymentMethod != ''">
            AND p.pym_method = #{params.paymentMethod}
        </if>
        <if test="params.startDate != null and params.startDate != ''">
            AND p.pym_date >= #{params.startDate}
        </if>
        <if test="params.endDate != null and params.endDate != ''">
            AND p.pym_date <![CDATA[<=]]> #{params.endDate}
        </if>
        ORDER BY 
        <choose>
            <when test="params.sortBy != null and params.sortBy != ''">
                ${params.sortBy}
            </when>
            <otherwise>
                p.pym_date
            </otherwise>
        </choose>
        <choose>
            <when test="params.sortDir != null and params.sortDir != ''">
                ${params.sortDir}
            </when>
            <otherwise>
                DESC
            </otherwise>
        </choose>
        LIMIT #{params.limit} OFFSET #{params.offset}
    </select>
    
    <!-- 결제 개수 조회 -->
    <select id="selectPaymentCount" resultType="Long">
        SELECT COUNT(*)
        FROM payment p
        LEFT JOIN dv_users u ON p.member_id = u.member_id
        LEFT JOIN payment_reservation_map prm ON p.pym_id = prm.pym_id
        LEFT JOIN reservation r ON prm.rsv_id = r.rsv_id
        WHERE 1=1
        <if test="params.search != null and params.search != ''">
            AND (
                p.cust_nm LIKE CONCAT('%', #{params.search}, '%')
                OR u.name LIKE CONCAT('%', #{params.search}, '%')
                OR p.merchant_uid LIKE CONCAT('%', #{params.search}, '%')
                OR p.imp_uid LIKE CONCAT('%', #{params.search}, '%')
                OR r.prod_nm LIKE CONCAT('%', #{params.search}, '%')
            )
        </if>
        <if test="params.status != null and params.status != ''">
            AND p.pym_status = #{params.status}
        </if>
        <if test="params.paymentMethod != null and params.paymentMethod != ''">
            AND p.pym_method = #{params.paymentMethod}
        </if>
        <if test="params.startDate != null and params.startDate != ''">
            AND p.pym_date >= #{params.startDate}
        </if>
        <if test="params.endDate != null and params.endDate != ''">
            AND p.pym_date <![CDATA[<=]]> #{params.endDate}
        </if>
    </select>
    
    <!-- 결제 상세 조회 -->
    <select id="selectPaymentById" resultType="com.daview.dto.PaymentDTO">
        SELECT 
            p.pym_id as paymentId,
            p.imp_uid as impUid,
            p.merchant_uid as merchantUid,
            p.member_id as memberId,
            u.name as memberName,
            u.email as memberEmail,
            u.phone as memberPhone,
            p.cust_nm as customerName,
            p.cust_tel as customerPhone,
            p.cust_em_tel as customerEmail,
            p.cust_date as customerDate,
            p.cust_memo as customerMemo,
            p.pym_price as amount,
            p.pym_status as status,
            p.pym_method as paymentMethod,
            p.pym_method as paymentMethodName,
            p.pym_num as paymentNumber,
            p.pym_date as paymentDate,
            -- 예약 정보
            prm.rsv_id as reservationId,
            r.prod_nm as productName,
            r.prod_type as productType,
            rt.rsv_name as reservationTypeName,
            r.rsv_date as reservationDate,
            r.rsv_type as reservationStatus
        FROM payment p
        LEFT JOIN dv_users u ON p.member_id = u.member_id
        LEFT JOIN payment_reservation_map prm ON p.pym_id = prm.pym_id
        LEFT JOIN reservation r ON prm.rsv_id = r.rsv_id
        LEFT JOIN rsv_type rt ON r.rsv_type = rt.rsv_type
        WHERE p.pym_id = #{paymentId}
    </select>
    
    <!-- 결제 상태 변경 -->
    <update id="updatePaymentStatus">
        UPDATE payment 
        SET pym_status = #{params.status}
        WHERE pym_id = #{params.paymentId}
    </update>
    
    <!-- 전체 결제 통계 -->
    <select id="selectPaymentTotalStatistics" resultType="map">
        SELECT 
            COUNT(*) as totalCount,
            COALESCE(SUM(pym_price), 0) as totalAmount,
            COALESCE(AVG(pym_price), 0) as averageAmount,
            COUNT(CASE WHEN pym_status = 1 THEN 1 END) as completedCount,
            COUNT(CASE WHEN pym_status = 2 THEN 1 END) as pendingCount,
            COUNT(CASE WHEN pym_status = 3 THEN 1 END) as failedCount,
            COUNT(CASE WHEN pym_status = 4 THEN 1 END) as cancelledCount,
            COUNT(CASE WHEN pym_status = 5 THEN 1 END) as refundedCount,
            COALESCE(SUM(CASE WHEN pym_status = 1 THEN pym_price ELSE 0 END), 0) as completedAmount,
            COALESCE(SUM(CASE WHEN pym_status = 5 THEN pym_price ELSE 0 END), 0) as refundedAmount
        FROM payment
        WHERE pym_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)
    </select>
    
    <!-- 상태별 결제 통계 -->
    <select id="selectPaymentStatusStatistics" resultType="map">
        SELECT 
            p.pym_status as status,
            COUNT(*) as count,
            COALESCE(SUM(p.pym_price), 0) as totalAmount,
            ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM payment), 2) as percentage,
            CASE p.pym_status
                WHEN 1 THEN '완료'
                WHEN 2 THEN '대기중'
                WHEN 3 THEN '실패'
                WHEN 4 THEN '취소'
                WHEN 5 THEN '환불'
                ELSE '알수없음'
            END as statusName
        FROM payment p
        GROUP BY p.pym_status
        ORDER BY count DESC
    </select>
    
    <!-- 최근 7일 결제 통계 -->
    <select id="selectRecentPaymentStatistics" resultType="map">
        SELECT 
            DATE(pym_date) as paymentDate,
            COUNT(*) as count,
            COALESCE(SUM(pym_price), 0) as totalAmount
        FROM payment
        WHERE pym_date >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        GROUP BY DATE(pym_date)
        ORDER BY paymentDate DESC
    </select>
    
    <!-- 결제 방법별 통계 -->
    <select id="selectPaymentMethodStatistics" resultType="map">
        SELECT 
            p.pym_method as paymentMethod,
            p.pym_method as paymentMethodName,
            COUNT(*) as count,
            COALESCE(SUM(p.pym_price), 0) as totalAmount,
            ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM payment), 2) as percentage
        FROM payment p
        WHERE p.pym_method IS NOT NULL
        GROUP BY p.pym_method
        ORDER BY count DESC
    </select>
    
    <!-- 결제 방법 목록 조회 -->
    <select id="selectPaymentMethods" resultType="map">
        SELECT DISTINCT
            pym_method as value,
            pym_method as label
        FROM payment
        WHERE pym_method IS NOT NULL
        ORDER BY pym_method
    </select>
    
    <!-- 예약 타입 목록 조회 -->
    <select id="selectReservationTypes" resultType="map">
        SELECT 
            rsv_type as value,
            rsv_name as label
        FROM rsv_type
        ORDER BY rsv_type
    </select>
    
    <!-- 월별 결제 통계 -->
    <select id="selectMonthlyPaymentStatistics" resultType="map">
        SELECT 
            YEAR(pym_date) as year,
            MONTH(pym_date) as month,
            COUNT(*) as count,
            COALESCE(SUM(pym_price), 0) as totalAmount
        FROM payment
        WHERE pym_date >= DATE_SUB(NOW(), INTERVAL 12 MONTH)
        GROUP BY YEAR(pym_date), MONTH(pym_date)
        ORDER BY year DESC, month DESC
    </select>
    
    <!-- 회원별 결제 통계 -->
    <select id="selectMemberPaymentStatistics" resultType="map">
        SELECT 
            p.member_id as memberId,
            u.name as memberName,
            COUNT(*) as paymentCount,
            COALESCE(SUM(p.pym_price), 0) as totalAmount,
            MAX(p.pym_date) as lastPaymentDate
        FROM payment p
        LEFT JOIN dv_users u ON p.member_id = u.member_id
        GROUP BY p.member_id, u.name
        HAVING paymentCount > 0
        ORDER BY totalAmount DESC
        LIMIT 10
    </select>
    
    <!-- 결제-예약 연결 생성 -->
    <insert id="insertPaymentReservationMap">
        INSERT INTO payment_reservation_map (pym_id, rsv_id)
        VALUES (#{paymentId}, #{reservationId})
    </insert>
    
    <!-- 결제-예약 연결 삭제 -->
    <delete id="deletePaymentReservationMap">
        DELETE FROM payment_reservation_map
        WHERE pym_id = #{paymentId}
        <if test="reservationId != null and reservationId != ''">
            AND rsv_id = #{reservationId}
        </if>
    </delete>
    
</mapper> 